id: Nutanix Task Poll
version: -1
name: Nutanix Task Poll
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: e0877759-2b1a-4017-838a-682ae625c22b
    type: start
    task:
      id: e0877759-2b1a-4017-838a-682ae625c22b
      version: -1
      name: ""
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "7"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 50
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "1":
    id: "1"
    taskid: 1faa3562-0e85-4f60-89b7-7a4b3c4d0ad9
    type: playbook
    task:
      id: 1faa3562-0e85-4f60-89b7-7a4b3c4d0ad9
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "3"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        simple: ${NutanixHypervisor.VMPowerStatus.task_uuid}
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: task_ids
      PollingCommandName:
        simple: nutanix-hypervisor-task-poll
      Timeout:
        simple: "10"
      dt:
        simple: NutanixHypervisor.Task(val.uuid!=${NutanixHypervisor.VMPowerStatus.task_uuid}
          || val.timed_out==true)
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 265,
          "y": 370
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "2":
    id: "2"
    taskid: 8707085d-6320-4e9c-8f85-a6f8a1b56bbd
    type: title
    task:
      id: 8707085d-6320-4e9c-8f85-a6f8a1b56bbd
      version: -1
      name: Done
      type: title
      iscommand: false
      brand: ""
      description: ''
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 480,
          "y": 910
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "3":
    id: "3"
    taskid: e7a96984-095a-44f7-8af4-53bb394d9f9b
    type: regular
    task:
      id: e7a96984-095a-44f7-8af4-53bb394d9f9b
      version: -1
      name: Nutanix Get Completed Task Info
      description: Poll tasks provided by task_ids to check if they are ready. Returns
        all the tasks from 'task_ids' list that are ready at the moment Nutanix service
        was polled. If no task is ready, it waits until at least one task is ready.
        If the 'timeout_interval' period ends and no task has finished, it returns a timeout response.
      script: '|||nutanix-hypervisor-task-poll'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      task_ids:
        simple: ${inputs.task_id}
      timeout_interval: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 545
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "4":
    id: "4"
    taskid: e553e1eb-e8cd-4923-81d1-09f464a87326
    type: condition
    task:
      id: e553e1eb-e8cd-4923-81d1-09f464a87326
      version: -1
      name: Check If Task Was Returned
      type: condition
      iscommand: false
      brand: ""
      description: ""
    nexttasks:
      '#default#':
      - "5"
      "yes":
      - "2"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: containsGeneral
          left:
            value:
              complex:
                root: NutanixHypervisor.Task
                accessor: uuid
            iscontext: true
          right:
            value:
              simple: inputs.task_id
            iscontext: true
    view: |-
      {
        "position": {
          "x": 265,
          "y": 720
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "5":
    id: "5"
    taskid: 74cf718c-c55d-4761-87a0-6e7ad42c0e9a
    type: regular
    task:
      id: 74cf718c-c55d-4761-87a0-6e7ad42c0e9a
      version: -1
      name: Print Error Message
      description: Prints an error entry with a given message.
      scriptName: PrintErrorEntry
      type: regular
      iscommand: false
      brand: ""
    scriptarguments:
      message:
        simple: Task was expected to exist.
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 895
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "7":
    id: "7"
    taskid: 06564bca-e761-41c9-89f0-cea20d01e4a6
    type: regular
    task:
      id: 06564bca-e761-41c9-89f0-cea20d01e4a6
      version: -1
      name: Nutanix Virtual Machine Power Status Change
      description: Set the power state of a virtual machine. If the virtual machine is
        being powered on and no host is specified, the scheduler will pick the host
        with the most available CPU and memory that can support the virtual machine.
        Note a host must be available. If the virtual machine is being
        power cycled, a different host can be specified to start it on. This is
        an asynchronous operation that results in the creation of a task object. The
        UUID of this task object is returned as the response of this operation. With
        this task UUID, the task status can be monitored by using the nutanix-hypervisor-task-poll
        command.
      script: '|||nutanix-hypervisor-vm-powerstatus-change'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "1"
    scriptarguments:
      host_uuid:
        simple: ${inputs.host_uuid}
      transition:
        simple: ${inputs.transition}
      vm_uuid:
        simple: ${inputs.vm_uuid}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 195
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 940,
        "width": 810,
        "x": 50,
        "y": 50
      }
    }
  }
inputs:
- key: vm_uuid
  value: {}
  required: true
  description: ID of the virtual machine to change its power status.
  playbookInputQuery:
- key: transition
  value: {}
  required: true
  description: |-
    The new power state to transfer the virtual machine to.
    Possible values are:
    ON, OFF, POWERCYCLE, RESET, PAUSE, SUSPEND, RESUME, SAVE, ACPI_SHUTDOWN, ACPI_REBOOT
  playbookInputQuery:
- key: host_uuid
  value: {}
  required: false
  description: If the virtual machine is being transitioned with 'ON' or 'POWERCYCLE',
    this host will be used to run the virtual machine. If host_uuid is not given,
    then Nutanix will chose the host with the most available CPU.
  playbookInputQuery:
fromversion: 5.0.0
description: Use this playbook to perform a power status change for a virtual machine,
    and wait until the power status change task is completed. This playbook receives the desired power status, calls the Nutanix service to perform the power status change, and continuously polls by running the nutanix-hypervisor-task-poll command on the task ID provided as an output from Nutanix to power the status change operation.
tests:
- No test
